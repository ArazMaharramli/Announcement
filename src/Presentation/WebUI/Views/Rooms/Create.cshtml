@model Application.CQRS.Rooms.Commands.Create.CreateRoomCommand

@inject Application.Common.Models.ConfigModels.TenantInfo tenant
@inject Application.Common.Interfaces.ICurrentUserService CurrentUserService
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Localizer

@section Styles{
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/css/intlTelInput.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/intlTelInput.min.js"></script>

    <style>
        .iti {
            width: 100%;
            @*background-color: transparent;*@
        }

        .iti--separate-dial-code .iti__selected-flag {
            background-color: transparent;
        }
    </style>
}

@section Scripts{
    <partial name="_ValidationScriptsPartial" />

    <script>
        const phoneInputField = document.querySelector("#phone");
        const phoneInput = window.intlTelInput(phoneInputField, {
            separateDialCode: true,
            allowDropdown: true,
            initialCountry: "az",
            utilsScript:
                "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js",
        });
        $('#phone').on('keyup', function () {
            if (phoneInput.isValidNumber()) {
                $('#ContactPhone').val(phoneInput.getNumber());
                document.querySelector('[data-valmsg-for="ContactPhone"]').innerHTML = "";
            } else {
                document.querySelector('[data-valmsg-for="ContactPhone"]').innerHTML = "@Localizer["Enter valid phone"]";
            }
        });
    </script>
    @if (Model is not null)
    {
        <script>
            phoneInput.setNumber("@Html.Raw(Model.ContactPhone)");
        </script>
    }
    <script>
        var selectedCategoryId = '@Model?.CategoryId';
        var selectedAmenitieIds = @Html.Raw(Json.Serialize(Model?.AmenitieIds));
        selectedAmenitieIds = selectedAmenitieIds ? selectedAmenitieIds : [];
        var selectedRequirementIds = @Html.Raw(Json.Serialize(Model?.RequirementIds));
        selectedRequirementIds = selectedRequirementIds ? selectedRequirementIds : [];

        const generateMegaOption = (imgUrl, title, id, isChecked, type, name) => {
            var checked = isChecked ? 'checked' : '';
            return `<label class="option">
                        <span class="option-label">
                            <span class="option-body">
                                <img src="${imgUrl}" class="h-50px w-50px" />
                                <span class="text-dark">${title}</span>
                            </span>
                        </span>

                        <span class="option-control">
                            <span class="${type}">
                                <input type="${type}" name="${name}" value="${id}" ${checked} />
                                <span></span>
                            </span>
                        </span>
                    </label>`;
        };
        $.ajax({
            url: "/rooms/categories",
            type: 'GET',
            success: function (res) {
                res.forEach(function (data, index, arr) {
                    var newOption = generateMegaOption(data.icon, data.name, data.id, selectedCategoryId == data.id, 'radio', 'CategoryId');
                    $("#categoriesContainer").append(`<div class="col-lg-6">${newOption}</div>`);
                });
            }
        });
        $.ajax({
            url: "/rooms/amenities",
            type: 'GET',
            success: function (res) {
                res.forEach(function (data, index, arr) {
                    var newOption = generateMegaOption(data.icon, data.name, data.id, selectedAmenitieIds.includes(data.id), 'checkbox', 'AmenitieIds');
                    $("#amenitiesContainer").append(`<div class="col-lg-4">${newOption}</div>`);
                });
            }
        });
        $.ajax({
            url: "/rooms/requirements",
            type: 'GET',
            success: function (res) {
                res.forEach(function (data, index, arr) {
                    var newOption = generateMegaOption(data.icon, data.name, data.id, selectedRequirementIds.includes(data.id), 'checkbox', 'RequirementIds');
                    $("#requirementsContainer").append(`<div class="col-lg-4">${newOption}</div>`);
                });
            }
        });</script>

    <script>const customWizard = $('[data-custom-wizard]')[0];
        var steps = $(customWizard).children('[data-custom-wizard-step]');
        var nextBtn = $('[data-custom-wizard-next]')[0];
        var previousBtn = $('[data-custom-wizard-previous]')[0];
        var submitBtn = $('[data-custom-wizard-submit]')[0];

        let stageCount = steps.length - 1;
        let currentStage = 0;

        const changeStage = () => {
            $(steps).hide();
            steps.eq(currentStage).show();
        }

        $(nextBtn).on('click', function () {
            if (currentStage < stageCount) {
                currentStage++;
                changeStage();
                resetButtons();
            }
        });
        $(previousBtn).on('click', function () {
            if (currentStage > 0) {
                currentStage--;
                changeStage();
                resetButtons();
            }
        });
        const resetButtons = () => {
            $(nextBtn).hide();
            $(submitBtn).hide();
            $(previousBtn).hide();

            if (currentStage == stageCount) {
                $(submitBtn).show();
            }
            if (currentStage > 0) {
                $(previousBtn).show();
            }
            if (currentStage < stageCount) {
                $(nextBtn).show();
            }
        };
        const initCustomWizard = () => {
            resetButtons();
            changeStage();
        };
        initCustomWizard();</script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD1uU_tT63977_KyXVILofNxnKlLdA32go&libraries=places&callback=initMap&v=weekly"></script>

    <script>
        var geocoder = new google.maps.Geocoder();
        var getLocationFromGPSBtn = $('#getlocationfromgpsbtn');
        var lngInput = $('#Lng');
        var latInput = $('#Lat');
        var addressInput = $('#Address');

        function getAddressStringFromLatLng(loc) {
            var latlng = new google.maps.LatLng(loc.lat, loc.lng);
            geocoder.geocode({
                'latLng': latlng
            }, function (results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                    if (results[1]) {
                        addressInput.val(results[1].formatted_address);
                    } else {
                        alert('No results found');
                    }
                } else {
                }
            });
        }
        const updateCoordinates = (loc) => {
            latInput.val(loc.lat);
            lngInput.val(loc.lng);
        }

        function initSearchBox() {
            var input = document.getElementById("Address");
            // Create the search box and link it to the UI element
            const searchBox = new google.maps.places.SearchBox(input);

            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener("places_changed", () => {
                const places = searchBox.getPlaces();
                if (places.length == 0) {
                    return;
                }

                places.forEach((place) => {
                    if (!place.geometry || !place.geometry.location) {
                        // console.log("Returned place contains no geometry");
                        return;
                    }

                    updateCoordinates(place.geometry.location);
                });
            });
        }
        initSearchBox();

        function getUserLocationFromGPS() {
            var btnhtml = getLocationFromGPSBtn.html();
            getLocationFromGPSBtn.html("<span class=\"spinner-border spinner-border-sm align-middle ms-2\"></span>");
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude,
                    };
                    updateCoordinates(pos);
                    getAddressStringFromLatLng(pos);
                    getLocationFromGPSBtn.html(btnhtml);
                },
                (err) => {
                    getLocationFromGPSBtn.html(btnhtml);
                }
            );
        }

        let askedForUsingGPSLocation = false;
        $('#Address').on('focus', function () {
            if (!askedForUsingGPSLocation) {
                 Swal.fire({
                        title: "@Localizer["Do you want to use your current location?"]",
                        text: "@Localizer["We keep your location secret. It will not be shown to anyone."]",
                        icon: "question",
                     buttonsStyling: false,
                     reverseButtons: true,

                     confirmButtonText: "<i class='la la-thumbs-up'></i> @Localizer["Yes"]",
                     cancelButtonText: "<i class='la la-pen-fancy'></i> @Localizer["No, I want to write"]",
                        showCancelButton: true,
                        customClass: {
                            confirmButton: "btn fw-bold btn-success",
                            cancelButton: "btn fw-bold btn-info",
                        }
                    }).then((res) => {
                        if (res.isConfirmed) {
                            getUserLocationFromGPS();
                        }
                    });
                askedForUsingGPSLocation = true;
            }
        });
        getLocationFromGPSBtn.on('click', function () {
            getUserLocationFromGPS();
        });
    </script>

    <script>$('#Price').TouchSpin({
            buttondown_class: 'btn btn-secondary',
            buttonup_class: 'btn btn-secondary',

            min: 0,
            step: 10,
            decimals: 0,
            boostat: 8,
            maxboostedstep: 10,
        });

        var filePreview = $('.filePreview').clone();
        $('.filePreview').remove();

        $('#mediafileinput').on('change', function () {
            var files = $('#mediafileinput').prop('files');

            KTApp.blockPage({
                overlayColor: '#000000',
                state: 'primary',
                message: '@Localizer["Uploading files. Please wait."]'
            });
            for (var i = 0; i != files.length; i++) {
                let formData = new FormData();
                formData.append("files", files[i]);

                $.ajax({
                    url: "/files/upload",
                    data: formData,
                    async: false,
                    processData: false,
                    contentType: false,
                    type: "POST",
                    success: function (res) {
                        var item = filePreview.clone();
                        item.find('img').attr('src', res.url);
                        item.find('input').attr('value', res.url);
                        $('#mediasContainer').append(item);
                    }
                });
            }
            KTApp.unblockPage();
        });

        $('[data-delete-uploaded-file]').on('click', function () {
            $(this).parents('.filePreview').parent().remove();
        });</script>
}
<div class="d-flex flex-column-fluid align-items-center mb-12 mb-lg-0">
    <div class="container pt-15">

        <div class="row justify-content-center">
            <div class="col-xl-12 col-xxl-7">
                <div class="w-100 d-flex justify-content-start mb-5">
                    <h1 class="font-weight-bolder">@Localizer["Create announcement"]</h1>
                </div>
                <form method="post">
                    <div asp-validation-summary="All"></div>
                    <div data-custom-wizard>
                        <div data-custom-wizard-step style="display:none;">
                            <h3>@Localizer["Select announcement category"]</h3>
                            <div class="row h-100" id="categoriesContainer">
                            </div>
                        </div>
                        <div data-custom-wizard-step style="display:none;">
                            <h3>@Localizer["Enter location"]</h3>
                            <div class="form-group">
                                <div class="input-group">
                                    <input type="text" class="form-control" asp-for="Address" placeholder="@Localizer["Enter address"]" />
                                    <div class="input-group-append">
                                        <button class="btn btn-outline-secondary" type="button">
                                            <i class='la la-map-marker'></i>
                                        </button>
                                    </div>
                                </div>
                                <span class="text-danger" asp-validation-for="Address"></span>
                                <input hidden asp-for="Lng" />
                                <input hidden asp-for="Lat" />
                            </div>
                        </div>
                        <div data-custom-wizard-step style="display:none;">
                            <h3>@Localizer["Enter details"]</h3>
                            <div class="form-group">
                                <label class="required" asp-for="Price"></label>
                                <input asp-for="Price" class="form-control" placeholder="@Localizer["Enter the price"]" />
                                <span class="form-text text-danger" asp-validation-for="Price"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="Description"></label>
                                <textarea asp-for="Description" class="form-control"></textarea>
                                <span class="form-text text-danger" asp-validation-for="Description"></span>
                            </div>
                            <!--end::Input-->
                        </div>
                        <div data-custom-wizard-step style="display:none;">
                            <h3>@Localizer["Select amenities"]</h3>
                            <div class="row" id="amenitiesContainer">

                            </div>
                            <!--end::Input-->
                        </div>
                        <div data-custom-wizard-step style="display:none;">
                            <h3>@Localizer["Select requirements"]</h3>
                            <span class="text-danger" asp-validation-for="RequirementIds"></span>
                            <div class="row" id="requirementsContainer">

                            </div>
                            <!--end::Input-->
                        </div>
                        <div data-custom-wizard-step style="display:none;">
                            <h3>@Localizer["Import medias"]</h3>
                            <div class="row" id="mediasContainer">
                                <div class="col-lg-4 col-md-6 filePreview mt-4">
                                    <div class="card card-custom overlay">
                                        <div class="card-body p-0">
                                            <div class="overlay-wrapper">
                                                <img src="" class="h-300px w-100 rounded" style="object-fit:cover;" />
                                                <input hidden name="MediaUrls" type="checkbox" checked />
                                            </div>
                                            <div class="overlay-layer">
                                                <button type="button" class="btn font-weight-bold btn-light-primary btn-shadow ml-2" data-delete-uploaded-file>
                                                    <i class="flaticon-delete"></i>@Localizer["Delete"]
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!--end::Input-->
                            <div class="form-group mt-5">
                                <label class="btn btn-light-primary" id="formFileMultiple">
                                    <input type="file" style="display:none;" id="mediafileinput" multiple>
                                    <i class="la la-plus"></i>@Localizer["Add media files"]
                                </label>
                            </div>
                        </div>
                        <div data-custom-wizard-step style="display:none;">
                            <div class="form-group">
                                <label class="required" asp-for="ContactName"></label>
                                <input asp-for="ContactName" class="form-control" />
                                <span class="form-text text-danger" asp-validation-for="ContactName"></span>
                            </div>
                            <!--end::Input-->
                            <!--begin::Input-->
                            <div class="form-group">
                                <label class="required" asp-for="ContactPhone"></label>
                                <input id="phone" class="form-control" />
                                <input hidden asp-for="ContactPhone" />
                                <span class="form-text text-danger" asp-validation-for="ContactPhone"></span>
                            </div>
                            <!--end::Input-->
                            <!--begin::Input-->
                            <div class="form-group">
                                <label class="required" asp-for="ContactEmail"></label>
                                <input asp-for="ContactEmail" class="form-control" />
                                <span class="form-text text-danger" asp-validation-for="ContactEmail"></span>
                            </div>
                            <!--end::Input-->
                        </div>
                        <div class="d-flex justify-content-between mt-5 pt-10">
                            <div class="mr-2">
                                <button type="button" class="btn btn-light-primary font-weight-bolder text-uppercase px-9 py-4" data-custom-wizard-previous>Previous</button>
                            </div>
                            <div>
                                <button type="submit" class="btn btn-success font-weight-bolder text-uppercase px-9 py-4" data-custom-wizard-submit>Submit</button>
                                <button type="button" class="btn btn-primary font-weight-bolder text-uppercase px-9 py-4" data-custom-wizard-next>Next</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>